parameters:
  - name: backendServiceArm
    type: string
  - name: backendServiceArmTR
    type: string
  - name: workingDirectory
    type: string
  - name: repository
    type: string
  - name: branch
    type: string
  - name: environment
    type: string

jobs:
  - deployment: terraform_apply
    continueOnError: false
    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
      environment: 'Produccion'
    ${{ else }}:
      environment: 'DevTest'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              fetchDepth: 1
            - task: TerraformInstaller@1
              displayName: 'install'
              inputs:
                terraformVersion: 'latest'
            - task: replacetokens@5
              inputs:
                rootDirectory: '$(System.DefaultWorkingDirectory)'
                targetFiles: '${{ parameters.workingDirectory }}/**/vars.tfvars'
                encoding: 'auto'
                tokenPattern: 'default'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'continue'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: false
            - task: TerraformTaskV4@4
              displayName: 'init'
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: '${{ parameters.backendServiceArmTR }}'
                backendAzureRmSubscriptionId: $(backendAzureRmSubscriptionId)
                backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
                backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
                backendAzureRmContainerName: $(backendAzureRmContainerName)
                backendAzureRmKey: $(backendAzureRmKey)
                workingDirectory: '${{ parameters.workingDirectory }}'
            - task: TerraformTaskV4@4
              displayName: 'Select Workspace'
              inputs:
                command: custom
                customCommand: 'workspace'
                commandOptions: 'select ${{ parameters.environment }}'
                environmentServiceNameAzureRM: '${{ parameters.backendServiceArm }}'
                workingDirectory: '${{ parameters.workingDirectory }}'
            - task: TerraformTaskV4@4
              displayName: 'plan'
              name: terraformPlan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                commandOptions:
                  '-input=false -var-file="vars.tfvars" -var
                  PAT="$(System.AccessToken)"'
                environmentServiceNameAzureRM: '${{ parameters.backendServiceArm }}'
                workingDirectory: '${{ parameters.workingDirectory }}'
            - task: TerraformTaskV4@4
              name: terraformApply
              displayName: 'apply'
              # env:
              #   TF_LOG: DEBUG
              condition:
                and(succeeded(), eq(variables['terraformPlan.changesPresent'], 'true'),
                eq(variables['Action'], 'Apply'))
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions:
                  '-input=false -auto-approve -var-file="vars.tfvars"
                  -var PAT="$(System.AccessToken)"'
                environmentServiceNameAzureRM: '${{ parameters.backendServiceArm }}'
                workingDirectory: '${{ parameters.workingDirectory }}'
            - task: TerraformTaskV4@4
              name: terraformOutput
              displayName: 'output'
              condition: and(succeeded(), eq(variables['Action'], 'Apply'))
              inputs:
                provider: 'azurerm'
                command: 'output'
                environmentServiceNameAzureRM: '${{ parameters.backendServiceArm }}'
                workingDirectory: '${{ parameters.workingDirectory }}'
            - powershell: |
                $terraformOutputJSON = Get-Content "$(terraformOutput.jsonOutputVariablesPath)" | ConvertFrom-Json
                $terraformOutputJSON | Get-Member -MemberType NoteProperty | % { $o = $terraformOutputJSON.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
                $terraformOutputJSON | Get-Member -MemberType NoteProperty | % { $o = $terraformOutputJSON.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);issecret=$($o.sensitive)]$($o.value)" }
              name: terraformOutputPS
              condition: and(succeeded(), eq(variables['Action'], 'Apply'))
              displayName: Read terraform outputs
